###############################################
###############CIDHiSSEpassercar###############
###############################################




setOption("useScaling","true")         
NUM_STATES = 2
NUM_HIDDEN = 2
NUM_RATES = NUM_STATES * NUM_HIDDEN
data = readCharacterDataDelimited(file="/home/alex/Desktop/Veronica/Data/pasercarReady.tsv", stateLabels=2, type="NaturalNumbers", delimiter="\t", headers=FALSE)
 
data_exp <- data.expandCharacters( NUM_HIDDEN )
 
### Reading phylogeny
phylogeny <- readTrees(file="/home/alex/Desktop/Veronica/Data/mccApril2021.tre")[1]

# Get some useful variables from the data. We need these later on.
taxa <- phylogeny.taxa()

mvi = 0
mni = 0

H = 0.587405


rate_mean <- ln( ln(5983.0/2.0) / phylogeny.rootAge() )
rate_sd <- 2*H
speciation_alpha ~ dnNormal(mean=rate_mean,sd=rate_sd)
moves[++mvi] = mvSlide(speciation_alpha,delta=0.20,tune=true,weight=3.0)


### Create a lognormal distributed variable for the turnover rate
extinction_alpha ~ dnNormal(mean=rate_mean,sd=rate_sd)
moves[++mvi] = mvSlide(extinction_alpha,delta=0.20,tune=true,weight=3.0)
### Create an exponential distributed variable for the diversification rate
speciation_beta ~ dnExp(1.0)
moves[++mvi] = mvScale(speciation_beta,lambda=0.20,tune=true,weight=2.0)

### Create an normal distributed variable for the turnover rate
extinction_beta ~ dnNormal(0.0,1.0)
moves[++mvi] = mvSlide(extinction_beta,delta=0.20,tune=true,weight=2.0)
for (j in 1:NUM_HIDDEN) {
for (i in 1:NUM_STATES) {
if ( j == 1) {
speciation[i] := exp( speciation_alpha )
extinction[i] := exp( extinction_alpha )
} else {
index = i+(j*NUM_STATES)-NUM_STATES
speciation[index] := speciation[index-NUM_STATES] * exp( speciation_beta )
extinction[index] := exp( extinction_alpha + extinction_beta )
}
}
}
## I defined very loosely my gamma priors for rates in the Q-mat
shape_pr <- 0.5
rate_pr := 1
for (i in 1:4) {
for (j in 1:4) {
q[i][j] := 0.0
}
}
rate_12 ~ dnGamma(shape=shape_pr, rate=rate_pr)
rate_21 ~ dnGamma(shape=shape_pr, rate=rate_pr)
moves[++mvi] = mvScale( rate_12, weight=2 )
moves[++mvi] = mvScale( rate_21, weight=2 )

q[1][2] := rate_12
q[3][4] := rate_12
q[2][1] := rate_21
q[4][3] := rate_21
########################################################
# Set up the transition rate matrix for hidden states #
#########################################################
hidden_rate1 ~ dnExponential(rate_pr)
moves[++mvi] = mvScale(hidden_rate1,lambda=0.2,tune=true,weight=5)
hidden_rate2 ~ dnExponential(rate_pr)
moves[++mvi] = mvScale(hidden_rate2,lambda=0.2,tune=true,weight=5)
q[1][3] := hidden_rate1
q[2][4] := hidden_rate1
q[3][1] := hidden_rate2
q[4][2] := hidden_rate2
######################################################################
# Create the rate matrix for the combined observed and hidden states #
######################################################################
rate_matrix := fnFreeK(q, rescaled=false, matrixExponentialMethod="scalingAndSquaring")

# asymmetric between hidden states is done with this new function fnFreeK


#####################################
# Set up the root state frequencies #
#####################################

rate_category_prior ~ dnDirichlet( rep(1,NUM_RATES) )
moves[++mvi] = mvBetaSimplex(rate_category_prior,tune=true,weight=2)
moves[++mvi] = mvDirichletSimplex(rate_category_prior,tune=true,weight=2)

### Create the fix parameter for the age of the root set to the observed age
root <- phylogeny.rootAge()


# rho is the probability of sampling species at the present
rho <- phylogeny.ntips()/5983


## construct a variable for the tree drawn from a birth death process
timetree ~ dnCDBDP( rootAge           = root,
speciationRates   = speciation,
extinctionRates   = extinction,
Q                 = rate_matrix,
pi                = rate_category_prior,
rho               = rho,
delta             = 1.0,
condition         = "time" )
timetree.clamp( phylogeny )
timetree.clampCharData( data_exp )
mymodel = model(rate_matrix)


monitors[++mni] = mnModel(filename="/home/alex/Desktop/Veronica/Data/output/ppCIDHiSSEpassercarNORMAL.log", printgen=1)
monitors[++mni] = mnScreen(printgen=10, q)



power_phisse = powerPosterior(mymodel, moves, monitors,"/home/alex/Desktop/Veronica/Data/output/ppCIDHiSSEpassercarNORMAL.out",cats=50)
power_phisse.burnin(generations=500,tuningInterval=50)
power_phisse.run(generations=1000)
