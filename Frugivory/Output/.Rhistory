p = p + geom_text(aes(label=end_state_1), hjust=node_label_hjust, size=node_label_size)
# set the root's start state to NA
attributes(t)$stats$start_state_1[n_node] = NA
# add clado daughter lineage start states on "shoulders" of tree
# get x, y coordinates of all nodes
x = getXcoord(tree)
y = getYcoord(tree)
x_anc = numeric(n_node)
node_index = numeric(n_node)
for (i in 1:n_node) {
if (getParent(tree, i) != 0) {
# if not the root, get the x coordinate for the parent node
x_anc[i] = x[getParent(tree, i)]
node_index[i] = i
}
}
shoulder_data = data.frame(node=node_index, x_anc=x_anc, y=y)
p = p %<+% shoulder_data
# plot the states on the "shoulders"
p = p + geom_text(aes(label=start_state_1, x=x_anc, y=y), hjust=shoulder_label_hjust, size=shoulder_label_size, na.rm=TRUE)
# show ancestral states as size / posteriors as color
p = p + geom_nodepoint(aes(colour=end_state_1_pp, size=end_state_1), alpha=alpha)
min_low = 0.0
max_up = 1.0
p = p + scale_colour_gradient2(low=color_low, mid=color_mid, high=color_high, limits=c(min_low, max_up), midpoint=0.5)
p = p + guides(size = guide_legend("Chromosome Number"))
p = p + guides(colour = guide_legend("Posterior Probability", override.aes = list(size=8)))
} else {
if (!("anc_state_1" %in% colnames(attributes(t)$stats))) {
anc_data = data.frame(node=names(attributes(t)$stats$end_state_1),
anc_state_1=as.numeric(levels(attributes(t)$stats$end_state_1))[attributes(t)$stats$end_state_1],
anc_state_1_pp=as.numeric(levels(attributes(t)$stats$end_state_1_pp))[attributes(t)$stats$end_state_1_pp])
p = p %<+% anc_data
}
# add end states as node labels
p = p + geom_text(aes(label=anc_state_1), hjust=node_label_hjust, size=node_label_size)
# show ancestral states as size / posteriors as color
p = p + geom_nodepoint(aes(colour=end_state_1_pp, size=end_state_1), alpha=alpha)
min_low = 0.0
max_up = 1.0
p = p + scale_colour_gradient2(low=color_low, mid=color_mid, high=color_high, limits=c(min_low, max_up), midpoint=0.5)
p = p + guides(size = guide_legend("Chromosome Number"))
p = p + guides(colour = guide_legend("Posterior Probability", override.aes = list(size=8)))
}
} else if (summary_statistic == "MAP") {
if (include_start_states) {
print("Start states not yet implemented for MAP ancestral states.")
return()
}
if (!("anc_state_1" %in% colnames(attributes(t)$stats))) {
anc_data = data.frame(node=names(attributes(t)$stats$end_state_1),
anc_state_1=as.numeric(levels(attributes(t)$stats$end_state_1))[attributes(t)$stats$end_state_1],
anc_state_1_pp=as.numeric(levels(attributes(t)$stats$end_state_1_pp))[attributes(t)$stats$end_state_1_pp])
p = p %<+% anc_data
}
# add ancestral states as node labels
p = p + geom_text(aes(label=anc_state_1), hjust=node_label_hjust, size=node_label_size)
# show ancestral states as size / posteriors as color
p = p + geom_nodepoint(aes(colour=anc_state_1_pp, size=anc_state_1), alpha=alpha)
# show the tip values
p = p + geom_tippoint(aes(size=anc_state_1), color="grey", alpha=alpha)
# set up the legend
min_low = 0.0
max_up = 1.0
p = p + scale_colour_gradient2(low=color_low, mid=color_mid, high=color_high, limits=c(min_low, max_up), midpoint=0.5)
p = p + guides(size = guide_legend("State"))
p = p + guides(colour = guide_legend("Posterior Probability", override.aes = list(size=4)))
} else if (summary_statistic == "mean") {
if (include_start_states) {
print("Start states not implemented for mean ancestral states.")
return()
}
# add ancestral states as node labels
p = p + geom_text(aes(label=round(mean, 2)), hjust=node_label_hjust, size=node_label_size)
# show the size of the 95% CI as color
lowers = as.numeric(levels(attributes(t)$stats$lower_0.95_CI))[attributes(t)$stats$lower_0.95_CI]
uppers = as.numeric(levels(attributes(t)$stats$upper_0.95_CI))[attributes(t)$stats$upper_0.95_CI]
diffs = uppers - lowers
diffs_df = data.frame(node=names(attributes(t)$stats$lower_0.95_CI), diff_vals=diffs)
p = p %<+% diffs_df
min_low = min(diffs, na.rm=TRUE)
max_up = max(diffs, na.rm=TRUE)
mid_val = min_low + (max_up - min_low) / 2.0
p = p + scale_colour_gradient2(low=color_low, mid=color_mid, high=color_high, limits=c(min_low, max_up), midpoint=mid_val)
p = p + geom_nodepoint(aes(size=mean, colour=diff_vals), alpha=alpha)
# show the tip values
p = p + geom_tippoint(aes(size=mean), color="grey", alpha=alpha)
# set up the legend
legend_text = "Mean State"
p = p + guides(size = guide_legend(legend_text))
p = p + guides(colour = guide_legend("95% CI Width", override.aes=list(size=4)))
}
p = p + scale_size(range = node_size_range)
p = p + theme(legend.position="left")
# set visible area
p = p + coord_cartesian(xlim = xlim_visible, ylim=ylim_visible, expand=TRUE)
print(p)
return(p)
}
p <- plot_ancestral_states(tree_file="Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory_Carotenoids/Output/anc_states_summary_BiSSEFrugivory.tree")
plot_ancestral_states = function(tree_file,
summary_statistic="MAP",
tree_layout="rectangular",
include_start_states=FALSE,
xlim_visible=c(0, 40),
ylim_visible=NULL,
tip_label_size=4,
tip_label_offset=3,
node_label_size=4,
node_label_hjust=-0.2,
shoulder_label_size=3,
shoulder_label_hjust=1.5,
alpha=0.5,
node_size_range=c(6, 15),
color_low="#D55E00",
color_mid="#F0E442",
color_high="#009E73") {
if ( (summary_statistic %in% c("MAP", "mean", "MAPChromosome")) == FALSE ) {
print("Invalid summary statistic.")
return()
}
# read in tree
t = read.tree(tree_file)
tree = attributes(t)$phylo
n_node = getNodeNum(tree)
# remove underscores from tip labels
attributes(t)$phylo$tip.label = gsub("_", " ", attributes(t)$phylo$tip.label)
# add tip labels
p = ggtree(t, layout=tree_layout)
p = p + geom_tiplab(size=tip_label_size, offset=tip_label_offset)
if (summary_statistic == "MAPChromosome") {
if (include_start_states) {
if (!("start_state_1" %in% colnames(attributes(t)$stats))) {
print("Start states not found in input tree.")
return()
}
# add ancestral states as node labels
p = p + geom_text(aes(label=end_state_1), hjust=node_label_hjust, size=node_label_size)
# set the root's start state to NA
attributes(t)$stats$start_state_1[n_node] = NA
# add clado daughter lineage start states on "shoulders" of tree
# get x, y coordinates of all nodes
x = getXcoord(tree)
y = getYcoord(tree)
x_anc = numeric(n_node)
node_index = numeric(n_node)
for (i in 1:n_node) {
if (getParent(tree, i) != 0) {
# if not the root, get the x coordinate for the parent node
x_anc[i] = x[getParent(tree, i)]
node_index[i] = i
}
}
shoulder_data = data.frame(node=node_index, x_anc=x_anc, y=y)
p = p %<+% shoulder_data
# plot the states on the "shoulders"
p = p + geom_text(aes(label=start_state_1, x=x_anc, y=y), hjust=shoulder_label_hjust, size=shoulder_label_size, na.rm=TRUE)
# show ancestral states as size / posteriors as color
p = p + geom_nodepoint(aes(colour=end_state_1_pp, size=end_state_1), alpha=alpha)
min_low = 0.0
max_up = 1.0
p = p + scale_colour_gradient2(low=color_low, mid=color_mid, high=color_high, limits=c(min_low, max_up), midpoint=0.5)
p = p + guides(size = guide_legend("Chromosome Number"))
p = p + guides(colour = guide_legend("Posterior Probability", override.aes = list(size=8)))
} else {
if (!("anc_state_1" %in% colnames(attributes(t)$stats))) {
anc_data = data.frame(node=names(attributes(t)$stats$end_state_1),
anc_state_1=as.numeric(levels(attributes(t)$stats$end_state_1))[attributes(t)$stats$end_state_1],
anc_state_1_pp=as.numeric(levels(attributes(t)$stats$end_state_1_pp))[attributes(t)$stats$end_state_1_pp])
p = p %<+% anc_data
}
# add end states as node labels
p = p + geom_text(aes(label=anc_state_1), hjust=node_label_hjust, size=node_label_size)
# show ancestral states as size / posteriors as color
p = p + geom_nodepoint(aes(colour=end_state_1_pp, size=end_state_1), alpha=alpha)
min_low = 0.0
max_up = 1.0
p = p + scale_colour_gradient2(low=color_low, mid=color_mid, high=color_high, limits=c(min_low, max_up), midpoint=0.5)
p = p + guides(size = guide_legend("Chromosome Number"))
p = p + guides(colour = guide_legend("Posterior Probability", override.aes = list(size=8)))
}
} else if (summary_statistic == "MAP") {
if (include_start_states) {
print("Start states not yet implemented for MAP ancestral states.")
return()
}
if (!("anc_state_1" %in% colnames(attributes(t)$stats))) {
anc_data = data.frame(node=names(attributes(t)$stats$end_state_1),
anc_state_1=as.numeric(levels(attributes(t)$stats$end_state_1))[attributes(t)$stats$end_state_1],
anc_state_1_pp=as.numeric(levels(attributes(t)$stats$end_state_1_pp))[attributes(t)$stats$end_state_1_pp])
p = p %<+% anc_data
}
# add ancestral states as node labels
p = p + geom_text(aes(label=anc_state_1), hjust=node_label_hjust, size=node_label_size)
# show ancestral states as size / posteriors as color
p = p + geom_nodepoint(aes(colour=anc_state_1_pp, size=anc_state_1), alpha=alpha)
# show the tip values
p = p + geom_tippoint(aes(size=anc_state_1), color="grey", alpha=alpha)
# set up the legend
min_low = 0.0
max_up = 1.0
p = p + scale_colour_gradient2(low=color_low, mid=color_mid, high=color_high, limits=c(min_low, max_up), midpoint=0.5)
p = p + guides(size = guide_legend("State"))
p = p + guides(colour = guide_legend("Posterior Probability", override.aes = list(size=4)))
} else if (summary_statistic == "mean") {
if (include_start_states) {
print("Start states not implemented for mean ancestral states.")
return()
}
# add ancestral states as node labels
p = p + geom_text(aes(label=round(mean, 2)), hjust=node_label_hjust, size=node_label_size)
# show the size of the 95% CI as color
lowers = as.numeric(levels(attributes(t)$stats$lower_0.95_CI))[attributes(t)$stats$lower_0.95_CI]
uppers = as.numeric(levels(attributes(t)$stats$upper_0.95_CI))[attributes(t)$stats$upper_0.95_CI]
diffs = uppers - lowers
diffs_df = data.frame(node=names(attributes(t)$stats$lower_0.95_CI), diff_vals=diffs)
p = p %<+% diffs_df
min_low = min(diffs, na.rm=TRUE)
max_up = max(diffs, na.rm=TRUE)
mid_val = min_low + (max_up - min_low) / 2.0
p = p + scale_colour_gradient2(low=color_low, mid=color_mid, high=color_high, limits=c(min_low, max_up), midpoint=mid_val)
p = p + geom_nodepoint(aes(size=mean, colour=diff_vals), alpha=alpha)
# show the tip values
p = p + geom_tippoint(aes(size=mean), color="grey", alpha=alpha)
# set up the legend
legend_text = "Mean State"
p = p + guides(size = guide_legend(legend_text))
p = p + guides(colour = guide_legend("95% CI Width", override.aes=list(size=4)))
}
p = p + scale_size(range = node_size_range)
p = p + theme(legend.position="left")
# set visible area
p = p + coord_cartesian(xlim = xlim_visible, ylim=ylim_visible, expand=TRUE)
print(p)
return(p)
}
p <- plot_ancestral_states(tree_file="Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory_Carotenoids/Output/anc_states_summary_BiSSEFrugivory.tree")
print(p)
a
"abort"
abort
.
#####Libraries
library("ggplot2")
library("wesanderson")
library("RevGadgets")
library("ggplot2")
library("ggtree")
library(RevGadgets)
library(ggplot2)
tree_file = "output/ase_mk.tree"
g <- plot_ancestral_states(tree_file, summary_statistic="MAP",
tip_label_size=1,
xlim_visible=NULL,
node_label_size=0,
show_posterior_legend=TRUE,
node_size_range=c(1, 3),
alpha=0.75)
library(RevGadgets)
g <- plot_ancestral_states(tree_file, summary_statistic="MAP",
tip_label_size=1,
xlim_visible=NULL,
node_label_size=0,
show_posterior_legend=TRUE,
node_size_range=c(1, 3),
alpha=0.75)
g <- plot_ancestral_states(tree_file, summary_statistic="MAP",
tip_label_size=1,
xlim_visible=NULL,
node_label_size=0,
node_size_range=c(1, 3),
alpha=0.75)
library(RevGadgets)
.
esc
q
w
.Data
#1. BiSSE no diploidization 250K runs of MCMC
p = plot_ancestral_states(tree_file="Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory_Carotenoids/Output/anc_states_summary_BiSSEFrugivory.tree",
size=0.4, include_start_states=FALSE,
summary_statistic="MAP",tip_label_size=0.45,
tip_label_offset=0,
#tip_label_offset=0.4,
tip_label_italics=TRUE,
node_label_size=FALSE,node_label_nudge_x=0.1,
shoulder_label_size=2,alpha=.3,node_size_range=c(2, 6),
tree_layout="circular")
p = plot_ancestral_states(tree_file="Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory_Carotenoids/Output/anc_states_summary_BiSSEFrugivory.tree")
.User
.data
.data
.data
plot_ancestral_states()
.data
#1. BiSSE no diploidization 250K runs of MCMC
p = plot_ancestral_states(tree_file="Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory_Carotenoids/Output/anc_states_summary_BiSSEFrugivory.tree",
size=0.4, include_start_states=FALSE,
summary_statistic="MAP",tip_label_size=0.45,
tip_label_offset=0,
#tip_label_offset=0.4,
tip_label_italics=TRUE,
node_label_size=FALSE,node_label_nudge_x=0.1,
shoulder_label_size=2,alpha=.3,node_size_range=c(2, 6),
tree_layout="circular")
?plotAncStatesPie
library("devtools")
install_github("GuangchuangYu/ggtree")
library("ggtree")
##################################################################
######################## Ancestral States ########################
##################################################################
#####read.beast
tree_file = "anc_states_summary_BiSSEFrugivory2.tree"
##################################################################
######################## Ancestral States ########################
##################################################################
#####read.beast
tree_file = "anc_states_summary_BiSSEFrugivory2.tree"
g <- plot_ancestral_states(tree_file, summary_statistic="MAP",
tip_label_size=1,
xlim_visible=NULL,
node_label_size=0,
show_posterior_legend=FALSE,
node_size_range=c(2.5, 2.5),
alpha=0.75)
g <- plot_ancestral_states(tree_file, summary_statistic="MAP",
tip_label_size=1,
xlim_visible=NULL,
node_label_size=0,
node_size_range=c(2.5, 2.5),
alpha=0.75)
.exit
.abort
g <- plot_ancestral_states(tree_file, summary_statistic="MAP",
tip_label_size=1,
xlim_visible=NULL,
node_label_size=0,
node_size_range=c(2.5, 2.5),
alpha=0.75)
g <- plot_ancestral_states(tree_file, summary_statistic="MAP")
#####Libraries
library("ggplot2")
library("wesanderson")
library("RevGadgets")
library("ggplot2")
library("ggtree")
library("devtools")
library("ggtree")
##################################################################
######################## Ancestral States ########################
##################################################################
#####read.beast
tree_file = "anc_states_summary_BiSSEFrugivory2.tree"
g <- plot_ancestral_states(tree_file, summary_statistic="MAP")
a
##################################################################
######################## Ancestral States ########################
##################################################################
#####read.beast
tree_file = "/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory2.tree"
g <- plot_ancestral_states(tree_file, summary_statistic="MAP")
g <- plot_ancestral_states(tree_file, summary_statistic="MAP",
tip_label_size=1,
xlim_visible=NULL,
node_label_size=0,
show_posterior_legend=FALSE,
node_size_range=c(2.5, 2.5),
alpha=0.75)
g <- plot_ancestral_states(tree_file, summary_statistic="MAP",
tip_label_size=1,
xlim_visible=NULL,
node_label_size=0,
node_size_range=c(2.5, 2.5),
alpha=0.75)
##################################################################
######################## Ancestral States ########################
##################################################################
#####read.beast
tree_file = "/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree"
##################################################################
######################## Ancestral States ########################
##################################################################
#####read.beast
tree_file = "/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree"
g <- plot_ancestral_states(tree_file, summary_statistic="MAP",
tip_label_size=1,
xlim_visible=NULL,
node_label_size=0,
node_size_range=c(2.5, 2.5),
alpha=0.75)
N
tr <- read.nexus("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree")
tr <- read.nexus("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree")
library("ape")
tr <- read.nexus("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree")
g <- plot_ancestral_states(tr, summary_statistic="MAP",
tip_label_size=1,
xlim_visible=NULL,
node_label_size=0,
node_size_range=c(2.5, 2.5),
alpha=0.75)
skip
tr <- read.nexus("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree")
tr <- read.nexus("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree")
g <- plot_ancestral_states(tr, summary_statistic="MAP",
tip_label_size=1,
xlim_visible=NULL,
node_label_size=0,
node_size_range=c(2.5, 2.5),
alpha=0.75)
##################################################################
######################## Ancestral States ########################
##################################################################
#####read.beast
tree_file = "/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree"
a
a
v
##################################################################
######################## Ancestral States ########################
##################################################################
#####read.beast
tree_file = "/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree"
g <- plot_ancestral_states(tree_file)
str(tree_file)
##################################################################
######################## Ancestral States ########################
##################################################################
#####read.beast
tree_file = "/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree"
str(tree_file)
tr <- read.nexus("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree")
str(tr)
tr <- read.nexus("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree")
g <- plot_ancestral_states(tr)
g <- plot_ancestral_states(file=tr)
g <- plot_ancestral_states(tr, summary_statistic="MAP")
p = plot_ancestral_states("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree" ,summary_statistic="MAP", include_start_states=FALSE, tip_label_size=0.3, tip_label_offset=0.5,node_label_size=0.1,node_label_nudge_x=0.1,shoulder_label_size=2,alpha=.3,node_size_range=c(2, 6))
p = plot_ancestral_states("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree" ,summary_statistic="MAP", include_start_states=FALSE, tip_label_size=0.3, tip_label_offset=0.5,node_label_size=0.1,shoulder_label_size=2,alpha=.3,node_size_range=c(2, 6))
p = plot_ancestral_states(tr,summary_statistic="MAP", include_start_states=FALSE, tip_label_size=0.3, tip_label_offset=0.5,node_label_size=0.1,shoulder_label_size=2,alpha=.3,node_size_range=c(2, 6))
tr <- read.nexus("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory2.tree")
p = plot_ancestral_states(tr,summary_statistic="MAP", include_start_states=FALSE, tip_label_size=0.3, tip_label_offset=0.5,node_label_size=0.1,shoulder_label_size=2,alpha=.3,node_size_range=c(2, 6))
tr <- read.nexus("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory2.tree")
str(tr)
p = plot_ancestral_states(file_tree=tr,summary_statistic="MAP", include_start_states=FALSE, tip_label_size=0.3, tip_label_offset=0.5,node_label_size=0.1,shoulder_label_size=2,alpha=.3,node_size_range=c(2, 6))
?plot_ancestral_states
##################################################################
######################## Ancestral States ########################
##################################################################
#####read.beast
tree_file = "/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree"
str(tree_file)
##################################################################
######################## Ancestral States ########################
##################################################################
#####read.beast
tree_file = ("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree")
str(tree_file)
##################################################################
######################## Ancestral States ########################
##################################################################
#####read.beast
library(RevGadgets)
tree_file = ("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree")
str(tree_file)
# ancestral state estimation
setwd("your_directory")
# ancestral state estimation
setwd("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/")
tree_file = ("anc_states_summary_BiSSEFrugivory.tree")
str(tree_file)
tree_file = "/anc_states_summary_BiSSEFrugivory.tree"
str(tree_file)
##################################################################
######################## Ancestral States ########################
##################################################################
#####read.beast
library(RevGadgets)
# ancestral state estimation
setwd("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/")
tree_file = "/anc_states_summary_BiSSEFrugivory.tree"
str(tree_file)
install.packages(RevGadgets)
install.packages("RevGadgets")
install.packages("RevGadgets")
install.packages("devtools")
devtools::install_github("cmt2/RevGadgets")
tree_file = "/anc_states_summary_BiSSEFrugivory.tree"
str(tree_file)
##################################################################
######################## Ancestral States ########################
##################################################################
#####read.beast
library(RevGadgets)
tree_file = "/anc_states_summary_BiSSEFrugivory.tree"
str(tree_file)
tree_file = "/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree"
str(tree_file)
tree_file = readTrees("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree")
str(tree_file)
tree_file = readTrees("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree")
tree_file = read.tree("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree")
tree_file = read.nexus("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree")
tree_file = read.nexus("/Users/veronicari/Documentos/GitHub/PasserDiversification/Frugivory/Output/anc_states_summary_BiSSEFrugivory.tree")
str(tree_file)
freeK <- processAncStates(file,
# Specify state labels.
# These numbers correspond to
# your input data file.
state_labels = c("0" = "Non Frugivory",
"1" = "Frugivory"))
