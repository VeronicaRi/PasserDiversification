##########################
#####ML: CIDMuHiSSE#######
##########################

###########################
### Reading in the Data ###
###########################

setOption("useScaling", "true")
NUM_STATES=4
NUM_HIDDEN = 2
NUM_RATES = NUM_STATES * NUM_HIDDEN

data = readCharacterDataDelimited(file="/home/alex/Desktop/Veronica/Data/musse50Ready.tsv", stateLabels=4, type="NaturalNumbers", delimiter="\t", headers=FALSE)


data_exp <- data.expandCharacters( NUM_HIDDEN )


phylogeny <- readTrees(file="/home/alex/Desktop/Veronica/Data/musse50tree.nex")[1]

taxa <- phylogeny.taxa()
# set my move index

mvi = 0
mni = 0
 
H = 0.587405
 
####################
# Create the rates #
####################
 
### Create the constant prior parameters of the diversification rates
## Number of surviving lineages
rate_mean <- ln( ln(5983.0/2.0) / phylogeny.rootAge() )
rate_sd <- 2*H
 


#####CHECAR#### 
speciation_alpha ~ dnNormal(mean=rate_mean,sd=rate_sd)
moves[++mvi] = mvSlide(speciation_alpha,delta=0.20,tune=true,weight=3.0)
 
extinction_alpha ~ dnNormal(mean=rate_mean,sd=rate_sd)
moves[++mvi] = mvSlide(extinction_alpha,delta=0.20,tune=true,weight=3.0)



speciation_beta ~ dnExp(1.0)
moves[++mvi] = mvScale(speciation_beta,lambda=0.20,tune=true,weight=2.0)
 
extinction_beta ~ dnNormal(0.0, 1.0)
moves[++mvi] = mvSlide(extinction_beta,delta=0.20,tune=true,weight=2.0)
 
############

 
for (j in 1:NUM_HIDDEN) {
for (i in 1:NUM_STATES) {
if ( j == 1) {
speciation[i] := exp( speciation_alpha )
extinction[i] := exp( extinction_alpha )
} else {
index = i+(j*NUM_STATES)-NUM_STATES
speciation[index] := speciation[index-NUM_STATES] * exp( speciation_beta )
extinction[index] := exp( extinction_alpha + extinction_beta )
}
}
}
 
#########################################################
# Set up the transition rate matrix for observed states #
#########################################################
 
##gamma priors for rate
shape_pr := 0.5
rate_pr := 1
 

### Rate parameters in the Q matrix that aren't zero
rate_12 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 0W to 1W
rate_21 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 1W to 0W
rate_23 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 1W to 1C
rate_32 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 1C to 1W
rate_34 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 1C to 0C
rate_43 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 0C to 1C
rate_14 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 0W to 0C
rate_41 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 0C to 0W
moves[++mvi] = mvScale( rate_12, weight=2 )
moves[++mvi] = mvScale( rate_21, weight=2 )
moves[++mvi] = mvScale( rate_23, weight=2 )
moves[++mvi] = mvScale( rate_32, weight=2 )
moves[++mvi] = mvScale( rate_34, weight=2 )
moves[++mvi] = mvScale( rate_43, weight=2 )
moves[++mvi] = mvScale( rate_14, weight=2 )
moves[++mvi] = mvScale( rate_41, weight=2 )
 
 
# matrix with all zeros:
for (i in 1:8) {
for (j in 1:8) {
q[i][j] := 0.0
}
}

##Matrix
q[1][2] := rate_12
q[2][1] := rate_21
q[2][3] := rate_23
q[3][2] := rate_32
q[3][4] := rate_34
q[4][3] := rate_43
q[1][4] := rate_14
q[4][1] := rate_41

q[5][6] := rate_12
q[6][5] := rate_21
q[6][7] := rate_23
q[7][6] := rate_32
q[7][8] := rate_34
q[8][7] := rate_43
q[5][8] := rate_14
q[8][5] := rate_41


#########################################################
# Set up the transition rate matrix for hidden states #
#########################################################
 
hidden_rate1 ~ dnExponential(rate_pr)
moves[++mvi] = mvScale(hidden_rate1,lambda=0.2,tune=true,weight=5)
hidden_rate2 ~ dnExponential(rate_pr)
moves[++mvi] = mvScale(hidden_rate2,lambda=0.2,tune=true,weight=5)
q[1][5] := hidden_rate1
q[2][6] := hidden_rate1
q[3][7] := hidden_rate1
q[4][8] := hidden_rate1
q[5][1] := hidden_rate2
q[6][2] := hidden_rate2
q[7][3] := hidden_rate2
q[8][4] := hidden_rate2

#####################################################################
# Create the rate matrix for the combined observed and hidden states #
######################################################################
 
rate_matrix := fnFreeK(q, rescaled=false)

rate_category_prior ~ dnDirichlet( rep(1,NUM_RATES) )
moves[++mvi] = mvBetaSimplex(rate_category_prior,tune=true,weight=2)
moves[++mvi] = mvDirichletSimplex(rate_category_prior,tune=true,weight=2)

### Create the fix parameter for the age of the root set to the observed age
root <- phylogeny.rootAge()
 
rho <- phylogeny.ntips()/5983


timetree ~ dnCDBDP( rootAge = root,
speciationRates   = speciation,
extinctionRates   = extinction,
Q                 = rate_matrix,
pi                = rate_category_prior,
delta             = 1.0,
rho               = rho)


timetree.clamp( phylogeny )
timetree.clampCharData( data_exp )
mymodel = model(rate_matrix)



monitors[++mni] = mnModel(filename="/home/alex/Desktop/Veronica/Data/output/ppCIDMuHiSSENORMAL.log", printgen=1)
monitors[++mni] = mnScreen(printgen=10, q)

power_phisse = powerPosterior(mymodel, moves, monitors,"/home/alex/Desktop/Veronica/Data/output/ppMuHiSSENORMAL.out",cats=50)
power_phisse.burnin(generations=500,tuningInterval=50)
power_phisse.run(generations=1000)

